{"version":3,"sources":["../code/collection.directive.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,OAAO,EAAE,MAAM,gBAAgB,CAAC;AACzC,OAAO,EAAE,iBAAiB,EAAE,MAAM,sBAAsB,CAAC;AAEzD;IAWuB,OAAO,EAAE,OAAO;IAAE,OAAO,CAAC,GAAG;gBAA7B,OAAO,EAAE,OAAO,EAAU,GAAG,EAAE,iBAAiB;IAEnE,SAAS,CAAC,CAAC,KAAA;IAKX,gBAAgB;IAChB,OAAO,CAAC,CAAC,KAAA;CAIZ;AASD;IAUuB,OAAO,EAAE,OAAO;IAAE,OAAO,CAAC,GAAG;gBAA7B,OAAO,EAAE,OAAO,EAAU,GAAG,EAAE,iBAAiB;IACnE,SAAS,CAAC,CAAC,KAAA;IAOX,OAAO,CAAC,CAAC,KAAA;CAKZ;AAQD;IAUuB,OAAO,EAAE,OAAO;IADnC,KAAK,EAAE,GAAG,CAAC;gBACQ,OAAO,EAAE,OAAO;IACnC,OAAO,CAAC,CAAC,KAAA;IAMT,MAAM,CAAC,CAAC,KAAA;CASX;AAOD;IAUuB,OAAO,EAAE,OAAO;IAAE,OAAO,CAAC,GAAG;gBAA7B,OAAO,EAAE,OAAO,EAAU,GAAG,EAAE,iBAAiB;IAEnE,SAAS,CAAC,CAAC,KAAA;IAKX,OAAO,CAAC,CAAC,KAAA;CAIZ;AASD;IAWuB,OAAO,EAAE,OAAO;IAAE,OAAO,CAAC,GAAG;gBAA7B,OAAO,EAAE,OAAO,EAAU,GAAG,EAAE,iBAAiB;IAEnE,SAAS,CAAC,CAAC,KAAA;IAKX,OAAO,CAAC,CAAC,KAAA;IAKT,MAAM,CAAC,CAAC,KAAA;CAGX;AASD;IAUuB,OAAO,EAAE,OAAO;IAAE,OAAO,CAAC,GAAG;gBAA7B,OAAO,EAAE,OAAO,EAAU,GAAG,EAAE,iBAAiB;IAEnE,SAAS,CAAC,CAAC,KAAA;IAKX,OAAO,CAAC,CAAC,KAAA;CAIZ;AASD;IASuB,OAAO,EAAE,OAAO;gBAAhB,OAAO,EAAE,OAAO;IAEnC,SAAS,CAAC,CAAC,KAAA;IAKX,OAAO,CAAC,CAAC,KAAA;CAKZ;AASD;IASuB,OAAO,EAAE,OAAO;gBAAhB,OAAO,EAAE,OAAO;IAEnC,SAAS,CAAC,CAAC,KAAA;IAUX,OAAO,CAAC,CAAC,KAAA;CAIZ;AAWD;IASuB,OAAO,EAAE,OAAO;gBAAhB,OAAO,EAAE,OAAO;IAEnC,SAAS,CAAC,CAAC,KAAA;IAOX,OAAO,CAAC,CAAC,KAAA;CAIZ;AASD;IASuB,OAAO,EAAE,OAAO;gBAAhB,OAAO,EAAE,OAAO;IAEnC,SAAS,CAAC,CAAC,KAAA;IAOX,OAAO,CAAC,CAAC,KAAA;CAIZ;AASD;IAWuB,OAAO,EAAE,OAAO;IAAE,OAAO,CAAC,GAAG;gBAA7B,OAAO,EAAE,OAAO,EAAU,GAAG,EAAE,iBAAiB;IAEnE,SAAS,CAAC,CAAC,KAAA;IAeX,OAAO,CAAC,CAAC,KAAA;IAoBT,MAAM,CAAC,CAAC,KAAA;IAWR,MAAM,CAAC,CAAC,KAAA;CAUX","file":"collection.directive.d.ts","sourcesContent":["import { Directive } from '@angular/core';\r\nimport { NgModel } from '@angular/forms';\r\nimport { CollectionService } from './collection.service';\r\n// ---------- beg 只能输入日期 ----------\r\n@Directive({\r\n    selector: '[onlyDate]',\r\n    host: {\r\n        '(keyup)': 'onkeyup($event)',\r\n        '(keydown)': 'onkeydown($event)',\r\n        'maxlength': '10',\r\n    },\r\n    providers: [NgModel,CollectionService],\r\n})\r\n\r\nexport class OnlyDateDirective {\r\n    constructor(public control: NgModel, private srv: CollectionService) {\r\n    }\r\n    onkeydown(e) {\r\n        if (!this.srv.onlyDateKeyDownFn(e)) {\r\n            return false;\r\n        }\r\n    }\r\n    /** @internal */\r\n    onkeyup(e) {\r\n        e.target.value = e.target.value.replace(/[^0-9-]/g, '')\r\n        this.control.viewToModelUpdate(this.srv.onlyDateKeyUpFn(e));\r\n    }\r\n}\r\n// ---------- end 只能输入日期 ----------\r\n\r\n/*\r\n--------------------------------------------------------------------------------------------------------------\r\n--------------------------------------------------------------------------------------------------------------\r\n*/\r\n\r\n// ---------- beg 只能输入日期时间 ----------\r\n@Directive({\r\n    selector: '[onlyDateTime]',\r\n    host: {\r\n        '(keyup)': 'onkeyup($event)',\r\n        '(keydown)': 'onkeydown($event)',\r\n        'maxlength': '19',\r\n    },\r\n    providers: [NgModel,CollectionService],\r\n})\r\nexport class OnlyDateTimeDirective {\r\n    constructor(public control: NgModel, private srv: CollectionService) { }\r\n    onkeydown(e) {\r\n        if (e.key !== \"Backspace\") {\r\n            if (!this.srv.onlyDateTimeKeyDownFn(e)) {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    onkeyup(e) {\r\n        e.target.value = e.target.value.replace(/[^0-9-\\s*:]/g, '')\r\n\r\n        this.control.viewToModelUpdate(this.srv.onlyDateTimeKeyUpFn(e));\r\n    }\r\n}\r\n// ---------- end 只能输入日期时间 ----------\r\n\r\n/*\r\n--------------------------------------------------------------------------------------------------------------\r\n--------------------------------------------------------------------------------------------------------------\r\n*/\r\n\r\n@Directive({\r\n    selector: '[onlyEmail]',\r\n    host: {\r\n        '(blur)': 'onblur($event)',\r\n        '(focus)': 'onfocus($event)',\r\n    },\r\n})\r\n\r\nexport class OnlyEmailDirective {\r\n    color: any;\r\n    constructor(public control: NgModel) { }\r\n    onfocus(e) {\r\n        if (e.target.value = \"请输入正确的邮箱\") {\r\n            e.target.value = '';\r\n            e.target.style.color = this.color;\r\n        }\r\n    }\r\n    onblur(e) {\r\n        let reg = /\\w[-\\w.+]*@([A-Za-z0-9][-A-Za-z0-9]+\\.)+[A-Za-z]{2,14}/;\r\n        if (!reg.test(e.target.value)) {\r\n            e.target.value = '请输入正确的邮箱';\r\n            this.color = e.target.style.color;\r\n            e.target.style.color = \"red\";\r\n        }\r\n        this.control.viewToModelUpdate(e.target.value);\r\n    }\r\n}\r\n/*\r\n--------------------------------------------------------------------------------------------------------------\r\n--------------------------------------------------------------------------------------------------------------\r\n*/\r\n\r\n// ---------- beg 只能输入整数 ----------\r\n@Directive({\r\n    selector: '[onlyInt]',\r\n    host: {\r\n        '(keyup)': 'onkeyup($event)',\r\n        '(keydown)': 'onkeydown($event)',\r\n    },\r\n    providers: [NgModel,CollectionService],\r\n})\r\n\r\nexport class OnlyIntDirective {\r\n    constructor(public control: NgModel, private srv: CollectionService) {\r\n    }\r\n    onkeydown(e) {\r\n        if (!this.srv.onlyIntKeyDownFn(e)) {\r\n            return false;\r\n        }\r\n    }\r\n    onkeyup(e) {\r\n        e.target.value = e.target.value.replace(/[^\\d+-]/g, '')\r\n        this.control.viewToModelUpdate(e.target.value);\r\n    }\r\n}\r\n// ---------- end 只能输入整数 ----------\r\n\r\n/*\r\n--------------------------------------------------------------------------------------------------------------\r\n--------------------------------------------------------------------------------------------------------------\r\n*/\r\n\r\n// ---------- beg 只能输入浮点数 ----------\r\n@Directive({\r\n    selector: '[onlyFloat]',\r\n    host: {\r\n        '(keyup)': 'onkeyup($event)',\r\n        '(keydown)': 'onkeydown($event)',\r\n        '(blur)': 'onblur($event)'\r\n    },\r\n    providers: [NgModel,CollectionService],\r\n})\r\n\r\nexport class OnlyFloatDirective {\r\n    constructor(public control: NgModel, private srv: CollectionService) {\r\n    }\r\n    onkeydown(e) {\r\n        if (!this.srv.onlyFloatKeyDownFn(e)) {\r\n            return false;\r\n        }\r\n    }\r\n    onkeyup(e) {\r\n        e.target.value = e.target.value.replace(/[^\\d+-.]/g, '');\r\n        this.control.viewToModelUpdate(e.target.value);\r\n    }\r\n\r\n    onblur(e) {\r\n        this.control.viewToModelUpdate(this.srv.blurFn(e));\r\n    }\r\n}\r\n// ---------- end 只能输入浮点数 ----------\r\n\r\n/*\r\n--------------------------------------------------------------------------------------------------------------\r\n--------------------------------------------------------------------------------------------------------------\r\n*/\r\n\r\n// ---------- beg 只能输入数字 ----------\r\n@Directive({\r\n    selector: '[onlyNumber]',\r\n    host: {\r\n        '(keyup)': 'onkeyup($event)',\r\n        '(keydown)': 'onkeydown($event)',\r\n    },\r\n    providers: [NgModel,CollectionService],\r\n})\r\n\r\nexport class OnlyNumberDirective {\r\n    constructor(public control: NgModel, private srv: CollectionService) {\r\n    }\r\n    onkeydown(e) {\r\n        if (!this.srv.onlyNumberKeyDownFn(e)) {\r\n            return false;\r\n        }\r\n    }\r\n    onkeyup(e) {\r\n        e.target.value = e.target.value.replace(/[^\\d+-.]/g, '')\r\n        this.control.viewToModelUpdate(e.target.value);\r\n    }\r\n}\r\n// ---------- end 只能输入数字 ----------\r\n\r\n/*\r\n--------------------------------------------------------------------------------------------------------------\r\n--------------------------------------------------------------------------------------------------------------\r\n*/\r\n\r\n// ---------- beg 只能输入汉字 ----------\r\n@Directive({\r\n    selector: '[onlyCh]',\r\n    host: {\r\n        '(keyup)': 'onkeyup($event)',\r\n        '(keydown)': 'onkeydown($event)',\r\n    },\r\n})\r\n\r\nexport class OnlyChDirective {\r\n    constructor(public control: NgModel) {\r\n    }\r\n    onkeydown(e) {\r\n        if (e.key !== \"Backspace\") {\r\n            return false;\r\n        }\r\n    }\r\n    onkeyup(e) {\r\n        e.target.value = e.target.value.replace(/[^\\u4e00-\\u9fa5]/g, '');\r\n        // e.target.value = e.target.value.replace(/^([^a-z].*)|(([a-z]\\w*).*\\W.*)$/i,'$3');\r\n        this.control.viewToModelUpdate(e.target.value);\r\n    }\r\n}\r\n// ---------- end 只能输入汉字 ----------\r\n\r\n/*\r\n--------------------------------------------------------------------------------------------------------------\r\n--------------------------------------------------------------------------------------------------------------\r\n*/\r\n\r\n// ---------- beg 只能输入英文 ----------\r\n@Directive({\r\n    selector: '[onlyEn]',\r\n    host: {\r\n        '(keyup)': 'onkeyup($event)',\r\n        '(keydown)': 'onkeydown($event)',\r\n    },\r\n})\r\n\r\nexport class OnlyEnDirective {\r\n    constructor(public control: NgModel) {\r\n    }\r\n    onkeydown(e) {\r\n        if (e.key !== \"Backspace\") {\r\n            if (!isNaN(e.key * 1)) {\r\n                return false;\r\n            }\r\n            if (e.code === \"Space\") {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    onkeyup(e) {\r\n        e.target.value = e.target.value.replace(/[^a-zA-Z\\(\\)]/g, '');\r\n        this.control.viewToModelUpdate(e.target.value);\r\n    }\r\n}\r\n// ---------- beg 只能输入英文 ----------\r\n\r\n/*\r\n--------------------------------------------------------------------------------------------------------------\r\n--------------------------------------------------------------------------------------------------------------\r\n*/\r\n\r\n\r\n\r\n// ---------- beg 只能输入英文加数字 ----------\r\n@Directive({\r\n    selector: '[onlyEnNum]',\r\n    host: {\r\n        '(keyup)': 'onkeyup($event)',\r\n        '(keydown)': 'onkeydown($event)',\r\n    },\r\n})\r\n\r\nexport class OnlyEnNumDirective {\r\n    constructor(public control: NgModel) {\r\n    }\r\n    onkeydown(e) {\r\n        if (e.key !== \"Backspace\") {\r\n            if (e.code === \"Space\") {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    onkeyup(e) {\r\n        e.target.value = e.target.value.replace(/[^a-zA-Z0-9]/g, '');\r\n        this.control.viewToModelUpdate(e.target.value);\r\n    }\r\n}\r\n// ---------- end 只能输入英文加数字 ----------\r\n\r\n/*\r\n--------------------------------------------------------------------------------------------------------------\r\n--------------------------------------------------------------------------------------------------------------\r\n*/\r\n\r\n// ---------- beg 只能输入英文加数字符号 ----------\r\n@Directive({\r\n    selector: '[onlyEnNumSign]',\r\n    host: {\r\n        '(keyup)': 'onkeyup($event)',\r\n        '(keydown)': 'onkeydown($event)',\r\n    },\r\n})\r\n\r\nexport class OnlyEnNumSingDirective {\r\n    constructor(public control: NgModel) {\r\n    }\r\n    onkeydown(e) {\r\n        if (e.key !== \"Backspace\") {\r\n            if (e.code === \"Space\") {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    onkeyup(e) {\r\n        e.target.value = e.target.value.replace(/[^\\w.\\(\\)\\<\\>\\[\\]]/g, '')\r\n        this.control.viewToModelUpdate(e.target.value);\r\n    }\r\n}\r\n// ---------- end 只能输入英文加数字 ----------\r\n\r\n/*\r\n--------------------------------------------------------------------------------------------------------------\r\n--------------------------------------------------------------------------------------------------------------\r\n*/\r\n\r\n// ---------- beg 只能输入货币数字 ----------\r\n@Directive({\r\n    selector: '[onlyMoney]',\r\n    host: {\r\n        '(keyup)': 'onkeyup($event)',\r\n        '(keydown)': 'onkeydown($event)',\r\n        '(blur)': 'onblur($event)'\r\n    },\r\n    providers: [NgModel,CollectionService],\r\n})\r\n\r\nexport class OnlyMoneyDirective {\r\n    constructor(public control: NgModel, private srv: CollectionService) {\r\n    }\r\n    onkeydown(e) {\r\n        if (this.srv.keydownCode(e)) {\r\n            if (!this.srv.ifIndexOfFlaot(e, true)) {\r\n                return false;\r\n            }\r\n            if (e.key == \",\") {\r\n                return false;\r\n            }\r\n            if (e.key !== '.') {\r\n                if (!this.srv.isNaNAndSpaceFn(e, true)) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    onkeyup(e) {\r\n        e.target.value = e.target.value.replace(/[^\\d.,]/g, '');\r\n        let value = e.target.value;\r\n        if (value.indexOf('.') === -1) {\r\n            if (value !== \"\") {\r\n                e.target.value = this.fmoney(value);\r\n            }\r\n        } else {\r\n            let tempValue = value.split('.');\r\n            let newValueOne = this.fmoney(tempValue[0].replace(/\\,/g, '')),\r\n                newValueTwo = tempValue[1];\r\n            if (newValueTwo.length > 2) {\r\n                newValueTwo = newValueTwo.slice(0, newValueTwo.length - 1);\r\n            }\r\n            e.target.value = newValueOne + '.' + newValueTwo;\r\n        }\r\n\r\n        this.control.viewToModelUpdate(e.target.value);\r\n    }\r\n\r\n    onblur(e) {\r\n        e.target.value = this.srv.blurFn(e);\r\n\r\n        let tempValue = e.target.value.split('.');\r\n        if (tempValue[1].length < 2) {\r\n            e.target.value = e.target.value + '0';\r\n        }\r\n\r\n        this.control.viewToModelUpdate(e.target.value);\r\n    }\r\n\r\n    fmoney(s) {\r\n        s = parseFloat((s + \"\").replace(/[^\\d\\.-]/g, \"\")) + \"\";\r\n        var l = s.split(\".\")[0].split(\"\").reverse(),\r\n            r = s.split(\".\")[1];\r\n        let t = \"\";\r\n        for (let i = 0; i < l.length; i++) {\r\n            t += l[i] + ((i + 1) % 3 == 0 && (i + 1) != l.length ? \",\" : \"\");\r\n        }\r\n        return t.split(\"\").reverse().join(\"\");\r\n    }\r\n}\r\n// ---------- end 只能输入货币数字 ----------\r\n"]}